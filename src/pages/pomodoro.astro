---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import { SITE } from "@/config";
---

<Layout title={`Pomodoro Timer | ${SITE.title}`}>
  <Header />
  <main id="main-content" class="mx-auto w-full max-w-3xl px-4 pb-12">
    <section class="prose prose-2xl pt-8 pb-8 text-center">
      <h1 class="mb-4 text-4xl font-bold">Pomodoro Timer</h1>
      <p class="mb-8 text-lg opacity-80">
        Focus for 25 minutes, then take a 5-minute break. Repeat to boost your productivity!
      </p>
    </section>

    <div class="mx-auto max-w-md">
      <!-- Timer Display -->
      <div class="mb-8 text-center">
        <div id="timer-display" class="mb-4 text-6xl font-mono font-bold text-skin-accent">
          25:00
        </div>
        <div id="timer-status" class="text-xl font-medium text-skin-base">
          Ready to Focus
        </div>
        <div id="session-count" class="mt-2 text-sm opacity-75">
          Session: 1
        </div>
      </div>

      <!-- Timer Controls -->
      <div class="mb-8 flex justify-center gap-4">
        <button
          id="start-btn"
          class="rounded-lg bg-skin-accent px-6 py-3 font-medium text-skin-inverted transition-colors hover:bg-skin-accent/90"
        >
          Start
        </button>
        <button
          id="pause-btn"
          class="rounded-lg border-2 border-skin-accent px-6 py-3 font-medium text-skin-accent transition-colors hover:bg-skin-accent hover:text-skin-inverted disabled:opacity-50"
          disabled
        >
          Pause
        </button>
        <button
          id="reset-btn"
          class="rounded-lg border-2 border-skin-base px-6 py-3 font-medium text-skin-base transition-colors hover:bg-skin-base hover:text-skin-inverted"
        >
          Reset
        </button>
      </div>

      <!-- Timer Settings -->
      <div class="mb-8 space-y-4">
        <h3 class="text-lg font-semibold">Settings</h3>
        <div class="grid grid-cols-3 gap-4">
          <div>
            <label for="focus-time" class="block text-sm font-medium mb-1">Focus (min)</label>
            <input
              type="number"
              id="focus-time"
              min="1"
              max="60"
              value="25"
              class="w-full rounded-md border border-skin-fill bg-skin-fill px-3 py-2 text-skin-base focus:border-skin-accent focus:outline-none focus:ring-1 focus:ring-skin-accent"
            />
          </div>
          <div>
            <label for="break-time" class="block text-sm font-medium mb-1">Break (min)</label>
            <input
              type="number"
              id="break-time"
              min="1"
              max="30"
              value="5"
              class="w-full rounded-md border border-skin-fill bg-skin-fill px-3 py-2 text-skin-base focus:border-skin-accent focus:outline-none focus:ring-1 focus:ring-skin-accent"
            />
          </div>
          <div>
            <label for="long-break-time" class="block text-sm font-medium mb-1">Long Break (min)</label>
            <input
              type="number"
              id="long-break-time"
              min="1"
              max="60"
              value="15"
              class="w-full rounded-md border border-skin-fill bg-skin-fill px-3 py-2 text-skin-base focus:border-skin-accent focus:outline-none focus:ring-1 focus:ring-skin-accent"
            />
          </div>
        </div>
      </div>

      <!-- Progress Bar -->
      <div class="mb-4">
        <div class="h-2 w-full rounded-full bg-skin-fill">
          <div
            id="progress-bar"
            class="h-2 rounded-full bg-skin-accent transition-all duration-300"
            style="width: 0%"
          ></div>
        </div>
      </div>

      <!-- Audio Toggle -->
      <div class="text-center">
        <label class="inline-flex items-center cursor-pointer">
          <input type="checkbox" id="sound-toggle" class="sr-only" checked />
          <div class="relative">
            <input type="checkbox" id="sound-checkbox" class="sr-only" />
            <div class="w-10 h-6 bg-skin-fill rounded-full shadow-inner"></div>
            <div class="absolute w-4 h-4 bg-skin-accent rounded-full shadow inset-y-1 left-1 transition-transform duration-300 ease-in-out"></div>
          </div>
          <span class="ml-3 text-sm font-medium">Sound notifications</span>
        </label>
      </div>
    </div>
  </main>
  <Footer />
</Layout>

<script>
  class PomodoroTimer {
    constructor() {
      this.isRunning = false;
      this.isPaused = false;
      this.currentSession = 1;
      this.isBreak = false;
      this.timeLeft = 25 * 60; // 25 minutes in seconds
      this.totalTime = 25 * 60;
      this.interval = null;
      this.soundEnabled = true;

      this.initializeElements();
      this.bindEvents();
      this.updateDisplay();
    }

    initializeElements() {
      this.timerDisplay = document.getElementById('timer-display');
      this.timerStatus = document.getElementById('timer-status');
      this.sessionCount = document.getElementById('session-count');
      this.startBtn = document.getElementById('start-btn');
      this.pauseBtn = document.getElementById('pause-btn');
      this.resetBtn = document.getElementById('reset-btn');
      this.progressBar = document.getElementById('progress-bar');
      this.soundToggle = document.getElementById('sound-toggle');
      this.focusTimeInput = document.getElementById('focus-time');
      this.breakTimeInput = document.getElementById('break-time');
      this.longBreakTimeInput = document.getElementById('long-break-time');
    }

    bindEvents() {
      this.startBtn.addEventListener('click', () => this.start());
      this.pauseBtn.addEventListener('click', () => this.pause());
      this.resetBtn.addEventListener('click', () => this.reset());
      this.soundToggle.addEventListener('change', (e) => {
        this.soundEnabled = e.target.checked;
      });

      // Update timer when settings change
      [this.focusTimeInput, this.breakTimeInput, this.longBreakTimeInput].forEach(input => {
        input.addEventListener('change', () => {
          if (!this.isRunning) {
            this.reset();
          }
        });
      });
    }

    start() {
      if (this.isPaused) {
        this.isPaused = false;
      } else if (!this.isRunning) {
        this.isRunning = true;
        this.totalTime = this.timeLeft;
      }

      this.startBtn.disabled = true;
      this.pauseBtn.disabled = false;
      this.timerStatus.textContent = this.isBreak ? 'Break Time!' : 'Focus Time!';

      this.interval = setInterval(() => {
        this.tick();
      }, 1000);
    }

    pause() {
      this.isPaused = true;
      this.startBtn.disabled = false;
      this.pauseBtn.disabled = true;
      this.timerStatus.textContent = 'Paused';
      clearInterval(this.interval);
    }

    reset() {
      this.isRunning = false;
      this.isPaused = false;
      this.isBreak = false;
      this.currentSession = 1;
      
      const focusMinutes = parseInt(this.focusTimeInput.value) || 25;
      this.timeLeft = focusMinutes * 60;
      this.totalTime = this.timeLeft;
      
      this.startBtn.disabled = false;
      this.pauseBtn.disabled = true;
      this.timerStatus.textContent = 'Ready to Focus';
      this.updateDisplay();
      clearInterval(this.interval);
    }

    tick() {
      this.timeLeft--;
      this.updateDisplay();

      if (this.timeLeft <= 0) {
        this.complete();
      }
    }

    complete() {
      clearInterval(this.interval);
      this.playSound();
      
      if (this.isBreak) {
        // Break is over, start next focus session
        this.isBreak = false;
        this.currentSession++;
        const focusMinutes = parseInt(this.focusTimeInput.value) || 25;
        this.timeLeft = focusMinutes * 60;
        this.timerStatus.textContent = 'Break Complete! Ready for Focus';
      } else {
        // Focus session is over, start break
        this.isBreak = true;
        const isLongBreak = this.currentSession % 4 === 0;
        const breakMinutes = isLongBreak 
          ? (parseInt(this.longBreakTimeInput.value) || 15)
          : (parseInt(this.breakTimeInput.value) || 5);
        this.timeLeft = breakMinutes * 60;
        this.timerStatus.textContent = `Focus Complete! Time for a ${isLongBreak ? 'Long ' : ''}Break`;
      }

      this.totalTime = this.timeLeft;
      this.isRunning = false;
      this.startBtn.disabled = false;
      this.pauseBtn.disabled = true;
      this.updateDisplay();
    }

    updateDisplay() {
      const minutes = Math.floor(this.timeLeft / 60);
      const seconds = this.timeLeft % 60;
      this.timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      
      this.sessionCount.textContent = `Session: ${this.currentSession}`;
      
      const progress = ((this.totalTime - this.timeLeft) / this.totalTime) * 100;
      this.progressBar.style.width = `${progress}%`;
    }

    playSound() {
      if (!this.soundEnabled) return;
      
      // Create a simple beep sound using Web Audio API
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      oscillator.frequency.value = 800;
      oscillator.type = 'sine';
      
      gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
      
      oscillator.start(audioContext.currentTime);
      oscillator.stop(audioContext.currentTime + 0.5);
    }
  }

  // Initialize timer when page loads
  document.addEventListener('astro:page-load', () => {
    new PomodoroTimer();
  });

  // Also initialize for direct page loads
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PomodoroTimer();
    });
  } else {
    new PomodoroTimer();
  }
</script>

<style>
  /* Custom toggle switch styling */
  #sound-toggle:checked + div > div {
    transform: translateX(1rem);
  }
  
  #sound-toggle:checked + div {
    background-color: rgb(var(--color-accent));
  }
</style>
